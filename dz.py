#this is simple base64 encryption by DEMONIC'S zone.
import base64
exec(base64.b64decode("import asyncio
import time
import random
import os
import requests
from telethon.sync import TelegramClient
from telethon.tl.functions.channels import InviteToChannelRequest
from telethon.errors import FloodWaitError, UserAlreadyParticipantError
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress
from rich.box import ROUNDED

console = Console()

# ====================== REDIRECT & AUTHENTICATION ======================
def authenticate_user():
    # First redirect to Telegram channel
    console.print(Panel.fit("[bold green]Redirecting to Telegram channel...If its not redirecting then join : https://t.me/+Uusns9qZHtw2OWQ1[/bold green]", box=ROUNDED))
    os.system("xdg-open https://t.me/+Uusns9qZHtw2OWQ1")
    
    # Ask if user has joined
    joined = console.input("[bold yellow]Have you joined the Telegram channel? (yes/no): [/bold yellow]").lower()
    if joined not in ['yes', 'y']:
        console.print("[bold red]You must join the channel to use this tool.[/bold red]")
        exit()
    
    # Ask for password
    console.print(Panel.fit("[bold cyan]Now you need the password. Enter 'Y' to continue. If not automatically redirecting, go to : https://t.me/c/2598647977/138[/bold cyan]", box=ROUNDED))
    password_prompt = console.input("[bold yellow]Enter Y for password: [/bold yellow]").lower()
    if password_prompt != 'y':
        console.print("[bold red]Password prompt required.[/bold red]")
        exit()
    
    # Redirect to password channel
    os.system("xdg-open https://t.me/c/2598647977/138")
    password = console.input("[bold red]Enter the password: [/bold red]")
    
    # Verify password
    try:
        response = requests.get("https://tcsdemonic.vercel.app/api/randomusers")
        if response.text.strip() == "dzdemonic":
            if password != "dzdemonic":
                console.print("[bold red]Invalid password! Access denied.[/bold red]")
                exit()
        else:
            # If response is JSON (original implementation)
            valid_passwords = response.json().get('passwords', [])
            if password not in valid_passwords:
                console.print("[bold red]Invalid password! Access denied.[/bold red]")
                exit()
    except Exception as e:
        console.print(f"[bold red]Error verifying password: {e}[/bold red]")
        exit()

# ====================== GET API CREDENTIALS ======================
def get_api_credentials():
    try:
        response = requests.get("https://tcsdemonic.vercel.app/api/fbinfo")
        if response.text.strip() == "dzdemonic":
            # Default credentials when API returns "dzdemonic"
            return 26160948, "41c6099e73ca330698e115b017792628"
        else:
            # Original implementation for JSON response
            data = response.json()
            return data.get('api_id'), data.get('api_hash')
    except Exception as e:
        console.print(f"[bold red]Error fetching API credentials: {e}[/bold red]")
        # Return default credentials if API fails
        return 26160948, "41c6099e73ca330698e115b017792628"

# ====================== HEADER ======================
def display_header():
    header = """
.#####...######..........######...####..
.##..##.....##.............##....##.....
.##..##....##....######....##....##.###.
.##..##...##...............##....##..##.
.#####...######............##.....####..
........................................
https://t.me/+Uusns9qZHtw2OWQ1
"""
    warning = "[bold yellow]WARNING:[/bold yellow] Adding more than 50 members per day may result in a ban."
    
    console.print(Panel.fit(header, style="bold cyan", box=ROUNDED))
    console.print(Panel.fit(warning, style="bold red", box=ROUNDED))
    console.print("\n")

# ====================== INPUT SECTION ======================
def get_inputs(api_id, api_hash):
    inputs = Table(show_header=False, box=ROUNDED, style="bold blue")
    inputs.add_column("Field", style="cyan")
    inputs.add_column("Value")
    
    console.print(f"[bold cyan]API ID: [/bold cyan]{api_id}")
    console.print(f"[bold cyan]API Hash: [/bold cyan]{api_hash}")
    phone = console.input("[bold cyan]Enter your phone number (with country code): [/bold cyan]")
    source_group = console.input("[bold cyan]Enter the source group username or ID: [/bold cyan]")
    destination_channel = console.input("[bold cyan]Enter the destination channel username or ID: [/bold cyan]")
    
    inputs.add_row("API ID", str(api_id))
    inputs.add_row("API Hash", "•"*len(api_hash))
    inputs.add_row("Phone", phone)
    inputs.add_row("Source Group", source_group)
    inputs.add_row("Destination Channel", destination_channel)
    
    console.print(Panel.fit(inputs, title="[bold green]INPUT DETAILS[/bold green]", box=ROUNDED))
    
    return int(api_id), api_hash, phone, source_group, destination_channel

# ====================== MODE SELECTION ======================
def select_mode():
    mode_table = Table(show_header=True, box=ROUNDED, style="bold magenta")
    mode_table.add_column("Option", style="cyan")
    mode_table.add_column("Description")
    
    mode_table.add_row("1", "By amount")
    mode_table.add_row("2", "By percentage")
    
    console.print(Panel.fit(mode_table, title="[bold green]SELECT ADDITION MODE[/bold green]", box=ROUNDED))
    mode = console.input("[bold magenta]Enter 1 or 2: [/bold magenta]")
    
    target_count = -1
    percent = 0
    
    if mode == '1':
        amount_table = Table(show_header=True, box=ROUNDED, style="bold yellow")
        amount_table.add_column("Option", style="cyan")
        amount_table.add_column("Amount")
        
        amount_map = {'1': 10, '2': 30, '3': 50, '4': 70, '5': 100}
        amount_table.add_row("1", "10")
        amount_table.add_row("2", "30")
        amount_table.add_row("3", "50")
        amount_table.add_row("4", "70")
        amount_table.add_row("5", "100")
        
        console.print(Panel.fit(amount_table, title="[bold green]SELECT AMOUNT[/bold green]", box=ROUNDED))
        amount_choice = console.input("[bold yellow]Enter choice number: [/bold yellow]")
        target_count = amount_map.get(amount_choice, 10)
    elif mode == '2':
        percent_table = Table(show_header=True, box=ROUNDED, style="bold yellow")
        percent_table.add_column("Option", style="cyan")
        percent_table.add_column("Percentage")
        
        percent_map = {'1': 10, '2': 30, '3': 50, '4': 70, '5': 100}
        percent_table.add_row("1", "10%")
        percent_table.add_row("2", "30%")
        percent_table.add_row("3", "50%")
        percent_table.add_row("4", "70%")
        percent_table.add_row("5", "100%")
        
        console.print(Panel.fit(percent_table, title="[bold green]SELECT PERCENTAGE[/bold green]", box=ROUNDED))
        percent_choice = console.input("[bold yellow]Enter choice number: [/bold yellow]")
        percent = percent_map.get(percent_choice, 10)
    
    return target_count, percent

# ====================== MEMBER SHUFFLING ======================
def shuffle_members(participants, added_users, skipped_users):
    # Separate added/skipped users from new ones
    added_ids = {u.id for u in added_users}
    skipped_ids = {u.id for u in skipped_users}
    
    new_users = [u for u in participants if u.id not in added_ids and u.id not in skipped_ids]
    random.shuffle(new_users)
    
    # Put skipped users at the beginning (they get priority)
    skipped_users_list = [u for u in participants if u.id in skipped_ids]
    random.shuffle(skipped_users_list)
    
    return skipped_users_list + new_users

# ====================== MAIN FUNCTION ======================
async def main():
    # Authentication flow
    authenticate_user()
    
    # Get API credentials automatically
    api_id, api_hash = get_api_credentials()
    
    # Display header and get inputs
    display_header()
    api_id, api_hash, phone, source_group, destination_channel = get_inputs(api_id, api_hash)
    target_count, percent = select_mode()
    
    added_users = []
    skipped_users = []

    async with TelegramClient(phone, api_id, api_hash) as client:
        console.print(Panel.fit("[bold green]Fetching participants...[/bold green]", box=ROUNDED))
        
        participants = []
        async for user in client.iter_participants(source_group):
            participants.append(user)

        if percent:
            target_count = int(len(participants) * percent / 100)

        info_table = Table(show_header=False, box=ROUNDED, style="bold blue")
        info_table.add_column("Metric", style="cyan")
        info_table.add_column("Value")
        info_table.add_row("Total members in group", str(len(participants)))
        info_table.add_row("Target to add", str(target_count))
        
        console.print(Panel.fit(info_table, title="[bold green]GROUP STATISTICS[/bold green]", box=ROUNDED))
        console.print("\n")

        added = 0
        attempt_count = 0
        max_attempts = len(participants) * 2  # Prevent infinite loops
        
        with Progress() as progress:
            task = progress.add_task("[cyan]Adding members...", total=target_count)
            
            while added < target_count and attempt_count < max_attempts:
                attempt_count += 1
                
                # Shuffle members with priority to non-added ones
                shuffled_members = shuffle_members(participants, added_users, skipped_users)
                
                for user in shuffled_members:
                    if added >= target_count:
                        break
                        
                    try:
                        # Check if user is already in channel
                        async for member in client.iter_participants(destination_channel):
                            if member.id == user.id:
                                raise UserAlreadyParticipantError(user.id)
                        
                        progress.console.print(f"[bold]Adding [cyan]{user.first_name or user.username or 'Unknown'}[/cyan]...[/bold]")
                        await client(InviteToChannelRequest(destination_channel, [user]))
                        progress.console.print(f"[green]✓ Added {user.id}[/green]")
                        added_users.append(user)
                        added += 1
                        progress.update(task, advance=1)
                        await asyncio.sleep(40)
                    
                    except UserAlreadyParticipantError:
                        progress.console.print(f"[yellow]⚠ Skipped {user.id}: Already in channel.[/yellow]")
                        if user not in skipped_users:
                            skipped_users.append(user)
                        continue
                    except FloodWaitError as e:
                        progress.console.print(f"[red]⌛ Flood wait for {e.seconds} seconds.[/red]")
                        time.sleep(e.seconds)
                    except Exception as e:
                        progress.console.print(f"[red]✗ Failed to add {user.id}: {e}[/red]")
                        continue

        # ====================== SUMMARY ======================
        summary_table = Table(title="[bold green]SUMMARY[/bold green]", box=ROUNDED, style="bold blue")
        summary_table.add_column("Metric", style="cyan")
        summary_table.add_column("Value", style="green")
        
        summary_table.add_row("Total Members in Source Group", str(len(participants)))
        summary_table.add_row("Target to Add", str(target_count))
        summary_table.add_row("Successfully Added", str(len(added_users)))
        summary_table.add_row("Skipped (Already Present)", str(len(skipped_users)))
        summary_table.add_row("Attempts Made", str(attempt_count))
        
        console.print(Panel.fit(summary_table, box=ROUNDED))

if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(main())").decode('utf-8'))
